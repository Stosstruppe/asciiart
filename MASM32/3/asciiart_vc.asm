; Listing generated by Microsoft (R) Optimizing Compiler Version 19.33.31630.0 

	TITLE	d:\projects\vc++\asciiart\release\asciiart.obj
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

EXTRN	__imp__putchar:PROC
EXTRN	@__security_check_cookie@4:PROC
$SG4294967291 DB '0123456789ABCDEF ', 00H
CONST	ENDS
PUBLIC	_main
PUBLIC	__real@3fa7731900000000
PUBLIC	__real@3fb5551d60000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@4010000000000000
EXTRN	__fltused:DWORD
?ca@@3MA DD	01H DUP (?)				; ca
?a@@3MA	DD	01H DUP (?)				; a
?i@@3HA	DD	01H DUP (?)				; i
?y@@3HA	DD	01H DUP (?)				; y
?cb@@3MA DD	01H DUP (?)				; cb
?b@@3MA	DD	01H DUP (?)				; b
?t@@3MA	DD	01H DUP (?)				; t
?x@@3HA	DD	01H DUP (?)				; x
_BSS	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3fb5551d60000000
CONST	SEGMENT
__real@3fb5551d60000000 DQ 03fb5551d60000000r	; 0.08333
CONST	ENDS
;	COMDAT __real@3fa7731900000000
CONST	SEGMENT
__real@3fa7731900000000 DQ 03fa7731900000000r	; 0.0458
CONST	ENDS
; Function compile flags: /Odtp
; File D:\Projects\VC++\asciiart\asciiart.cpp
;	COMDAT _main
_TEXT	SEGMENT
tv147 = -8						; size = 4
tv142 = -4						; size = 4
_main	PROC						; COMDAT

; 7    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 8    : 	for (y = -12; y <= 12; y++) {

	mov	DWORD PTR ?y@@3HA, -12			; fffffff4H
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR ?y@@3HA
	add	eax, 1
	mov	DWORD PTR ?y@@3HA, eax
$LN4@main:
	cmp	DWORD PTR ?y@@3HA, 12			; 0000000cH
	jg	$LN3@main

; 9    : 		for (x = -39; x <= 39; x++) {

	mov	DWORD PTR ?x@@3HA, -39			; ffffffd9H
	jmp	SHORT $LN7@main
$LN5@main:
	mov	ecx, DWORD PTR ?x@@3HA
	add	ecx, 1
	mov	DWORD PTR ?x@@3HA, ecx
$LN7@main:
	cmp	DWORD PTR ?x@@3HA, 39			; 00000027H
	jg	$LN6@main

; 10   : 			ca = x * 0.0458f;

	fild	DWORD PTR ?x@@3HA
	fstp	DWORD PTR tv142[ebp]
	fld	DWORD PTR tv142[ebp]
	fmul	QWORD PTR __real@3fa7731900000000
	fstp	DWORD PTR ?ca@@3MA

; 11   : 			cb = y * 0.08333f;

	fild	DWORD PTR ?y@@3HA
	fstp	DWORD PTR tv147[ebp]
	fld	DWORD PTR tv147[ebp]
	fmul	QWORD PTR __real@3fb5551d60000000
	fstp	DWORD PTR ?cb@@3MA

; 12   : 			a = ca;

	fld	DWORD PTR ?ca@@3MA
	fstp	DWORD PTR ?a@@3MA

; 13   : 			b = cb;

	fld	DWORD PTR ?cb@@3MA
	fstp	DWORD PTR ?b@@3MA

; 14   : 			for (i = 0; i <= 15; i++) {

	mov	DWORD PTR ?i@@3HA, 0
	jmp	SHORT $LN10@main
$LN8@main:
	mov	edx, DWORD PTR ?i@@3HA
	add	edx, 1
	mov	DWORD PTR ?i@@3HA, edx
$LN10@main:
	cmp	DWORD PTR ?i@@3HA, 15			; 0000000fH
	jg	SHORT $LN9@main

; 15   : 				t = a * a - b * b + ca;

	fld	DWORD PTR ?a@@3MA
	fmul	DWORD PTR ?a@@3MA
	fld	DWORD PTR ?b@@3MA
	fmul	DWORD PTR ?b@@3MA
	fsubp	ST(1), ST(0)
	fadd	DWORD PTR ?ca@@3MA
	fstp	DWORD PTR ?t@@3MA

; 16   : 				b = 2.0f * a * b + cb;

	fld	DWORD PTR ?a@@3MA
	fmul	QWORD PTR __real@4000000000000000
	fmul	DWORD PTR ?b@@3MA
	fadd	DWORD PTR ?cb@@3MA
	fstp	DWORD PTR ?b@@3MA

; 17   : 				a = t;

	fld	DWORD PTR ?t@@3MA
	fstp	DWORD PTR ?a@@3MA

; 18   : 				if ((a * a + b * b) > 4.0f) {

	fld	DWORD PTR ?a@@3MA
	fmul	DWORD PTR ?a@@3MA
	fld	DWORD PTR ?b@@3MA
	fmul	DWORD PTR ?b@@3MA
	faddp	ST(1), ST(0)
	fcomp	QWORD PTR __real@4010000000000000
	fnstsw	ax
	test	ah, 65					; 00000041H
	jne	SHORT $LN11@main

; 19   : 					break;

	jmp	SHORT $LN9@main
$LN11@main:

; 20   : 				}
; 21   : 			}

	jmp	$LN8@main
$LN9@main:

; 22   : 			putchar("0123456789ABCDEF "[i]);

	mov	eax, DWORD PTR ?i@@3HA
	movsx	ecx, BYTE PTR $SG4294967291[eax]
	push	ecx
	call	DWORD PTR __imp__putchar
	add	esp, 4

; 23   : 		}

	jmp	$LN5@main
$LN6@main:

; 24   : 		putchar('\n');

	push	10					; 0000000aH
	call	DWORD PTR __imp__putchar
	add	esp, 4

; 25   : 	}

	jmp	$LN2@main
$LN3@main:

; 26   : }

	xor	eax, eax
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
END
