Microsoft (R) Macro Assembler Version 6.14.8444		    10/29/22 09:31:31
asciiart.asm						     Page 1 - 1


				comment *
				ml /c /Fl /Sa asciiart.asm
				link16 /t asciiart;
				msdos asciiart
				*
				.model tiny

				mul32 proto c :word, :word, :word
				add32 proto c :word, :word, :word
				sub32 proto c :word, :word, :word

 0000				.data
 0000 30 31 32 33 34 35		hex	db	'0123456789ABCDEF '
       36 37 38 39 41 42
       43 44 45 46 20

 0011 0000			i$	dw	?
 0013 0000			x$	dw	?
 0015 0000			y$	dw	?

 0017 00000000			a$	dd	?
 001B 00000000			b$	dd	?
 001F 00000000			ca$	dd	?
 0023 00000000			cb$	dd	?
 0027 00000000			t$	dd	?
 002B 00000000			w$	dd	?

 0000				.code
					org	0100h
 0100				start:
				;	mov	ax, ds
				;	mov	es, ax

 0100  C7 06 0015 R FFF4		mov	y$, -12
 0106				Ly:
 0106  C7 06 0013 R FFD9		mov	x$, -39
 010C				Lx:
							; ca = x * 0.0458;
 010C  A1 0013 R			mov	ax, x$
 010F  B9 0177				mov	cx, 375
 0112  F7 E1				mul	cx
 0114  99				cwd
 0115  A3 001F R			mov	word ptr ca$, ax
 0118  89 16 0021 R			mov	word ptr ca$+2, dx
 011C  A3 0017 R			mov	word ptr a$, ax
 011F  89 16 0019 R			mov	word ptr a$+2, dx
							; cb = y * 0.08333;
 0123  A1 0015 R			mov	ax, y$
 0126  B9 02AB				mov	cx, 683
 0129  F7 E1				mul	cx
 012B  99				cwd
 012C  A3 0023 R			mov	word ptr cb$, ax
 012F  89 16 0025 R			mov	word ptr cb$+2, dx
 0133  A3 001B R			mov	word ptr b$, ax
 0136  89 16 001D R			mov	word ptr b$+2, dx

 013A  C7 06 0011 R 0000		mov	i$, 0
 0140				Li:
							; t = a * a - b * b + ca;
					invoke	mul32, addr t$, addr a$, addr a$
 0140  8D 06 0017 R	   *	    lea    ax, a$
 0144  50		   *	    push   ax
 0145  8D 06 0017 R	   *	    lea    ax, a$
 0149  50		   *	    push   ax
 014A  8D 06 0027 R	   *	    lea    ax, t$
 014E  50		   *	    push   ax
 014F  E8 0122		   *	    call   mul32
 0152  83 C4 06		   *	    add    sp, 00006h
					invoke	mul32, addr w$, addr b$, addr b$
 0155  8D 06 001B R	   *	    lea    ax, b$
 0159  50		   *	    push   ax
 015A  8D 06 001B R	   *	    lea    ax, b$
 015E  50		   *	    push   ax
 015F  8D 06 002B R	   *	    lea    ax, w$
 0163  50		   *	    push   ax
 0164  E8 010D		   *	    call   mul32
 0167  83 C4 06		   *	    add    sp, 00006h
					invoke	sub32, addr t$, addr t$, addr w$
 016A  8D 06 002B R	   *	    lea    ax, w$
 016E  50		   *	    push   ax
 016F  8D 06 0027 R	   *	    lea    ax, t$
 0173  50		   *	    push   ax
 0174  8D 06 0027 R	   *	    lea    ax, t$
 0178  50		   *	    push   ax
 0179  E8 0153		   *	    call   sub32
 017C  83 C4 06		   *	    add    sp, 00006h
					invoke	add32, addr t$, addr t$, addr ca$
 017F  8D 06 001F R	   *	    lea    ax, ca$
 0183  50		   *	    push   ax
 0184  8D 06 0027 R	   *	    lea    ax, t$
 0188  50		   *	    push   ax
 0189  8D 06 0027 R	   *	    lea    ax, t$
 018D  50		   *	    push   ax
 018E  E8 011F		   *	    call   add32
 0191  83 C4 06		   *	    add    sp, 00006h
							; b = 2.0 * a * b + cb;
					invoke	mul32, addr b$, addr a$, addr b$
 0194  8D 06 001B R	   *	    lea    ax, b$
 0198  50		   *	    push   ax
 0199  8D 06 0017 R	   *	    lea    ax, a$
 019D  50		   *	    push   ax
 019E  8D 06 001B R	   *	    lea    ax, b$
 01A2  50		   *	    push   ax
 01A3  E8 00CE		   *	    call   mul32
 01A6  83 C4 06		   *	    add    sp, 00006h
					invoke	add32, addr b$, addr b$, addr b$
 01A9  8D 06 001B R	   *	    lea    ax, b$
 01AD  50		   *	    push   ax
 01AE  8D 06 001B R	   *	    lea    ax, b$
 01B2  50		   *	    push   ax
 01B3  8D 06 001B R	   *	    lea    ax, b$
 01B7  50		   *	    push   ax
 01B8  E8 00F5		   *	    call   add32
 01BB  83 C4 06		   *	    add    sp, 00006h
					invoke	add32, addr b$, addr b$, addr cb$
 01BE  8D 06 0023 R	   *	    lea    ax, cb$
 01C2  50		   *	    push   ax
 01C3  8D 06 001B R	   *	    lea    ax, b$
 01C7  50		   *	    push   ax
 01C8  8D 06 001B R	   *	    lea    ax, b$
 01CC  50		   *	    push   ax
 01CD  E8 00E0		   *	    call   add32
 01D0  83 C4 06		   *	    add    sp, 00006h
							; a = t;
 01D3  A1 0027 R			mov	ax, word ptr t$
 01D6  8B 16 0029 R			mov	dx, word ptr t$+2
 01DA  A3 0017 R			mov	word ptr a$, ax
 01DD  89 16 0019 R			mov	word ptr a$+2, dx
							; if ((a * a + b * b) > 4.0) break;
					invoke	mul32, addr t$, addr a$, addr a$
 01E1  8D 06 0017 R	   *	    lea    ax, a$
 01E5  50		   *	    push   ax
 01E6  8D 06 0017 R	   *	    lea    ax, a$
 01EA  50		   *	    push   ax
 01EB  8D 06 0027 R	   *	    lea    ax, t$
 01EF  50		   *	    push   ax
 01F0  E8 0081		   *	    call   mul32
 01F3  83 C4 06		   *	    add    sp, 00006h
					invoke	mul32, addr w$, addr b$, addr b$
 01F6  8D 06 001B R	   *	    lea    ax, b$
 01FA  50		   *	    push   ax
 01FB  8D 06 001B R	   *	    lea    ax, b$
 01FF  50		   *	    push   ax
 0200  8D 06 002B R	   *	    lea    ax, w$
 0204  50		   *	    push   ax
 0205  E8 006C		   *	    call   mul32
 0208  83 C4 06		   *	    add    sp, 00006h
					invoke	add32, addr t$, addr t$, addr w$
 020B  8D 06 002B R	   *	    lea    ax, w$
 020F  50		   *	    push   ax
 0210  8D 06 0027 R	   *	    lea    ax, t$
 0214  50		   *	    push   ax
 0215  8D 06 0027 R	   *	    lea    ax, t$
 0219  50		   *	    push   ax
 021A  E8 0093		   *	    call   add32
 021D  83 C4 06		   *	    add    sp, 00006h
 0220  83 3E 0029 R 00			cmp	word ptr t$+2, 0
 0225  77 16				ja	LiE
 0227  81 3E 0027 R 8000		cmp	word ptr t$, 32768
 022D  77 0E				ja	LiE

 022F  FF 06 0011 R			inc	i$
 0233  83 3E 0011 R 0F			cmp	i$, 15
 0238  7F 03 E9 FF03			jle	Li
 023D				LiE:
 023D  8B 36 0011 R			mov	si, i$
 0241  8A 94 0000 R			mov	dl, [si + hex]
 0245  B4 02				mov	ah, 02h
 0247  CD 21				int	21h

 0249  FF 06 0013 R			inc	x$
 024D  83 3E 0013 R 27			cmp	x$, 39
 0252  7F 03 E9 FEB5			jle	Lx

 0257  B4 02				mov	ah, 02h
 0259  B2 0D				mov	dl, 0dh
 025B  CD 21				int	21h
 025D  B2 0A				mov	dl, 0ah
 025F  CD 21				int	21h

 0261  FF 06 0015 R			inc	y$
 0265  83 3E 0015 R 0C			cmp	y$, 12
 026A  7F 03 E9 FE97			jle	Ly

 026F  B8 4C00				mov	ax, 4c00h
 0272  CD 21				int	21h

 0274				mul32 proc c pc$:word, pa$:word, pb$:word
 0274  55		   *	    push   bp
 0275  8B EC		   *	    mov    bp, sp
 0277  56				push	si
 0278  57				push	di

 0279  8B 76 06				mov	si, pa$
 027C  8B 7E 08				mov	di, pb$
								; a[0] * b[1]
 027F  8B 04				mov	ax, [si]
 0281  8B 4D 02				mov	cx, [di+2]
 0284  F7 E1				mul	cx
 0286  50				push	ax
								; a[1] * b[0]
 0287  8B 44 02				mov	ax, [si+2]
 028A  8B 0D				mov	cx, [di]
 028C  F7 E1				mul	cx
 028E  50				push	ax
								; dx:ax = a[0] * b[0]
 028F  8B 04				mov	ax, [si]
 0291  8B 0D				mov	cx, [di]
 0293  F7 E1				mul	cx
 0295  59				pop	cx
 0296  03 D1				add	dx, cx
 0298  59				pop	cx
 0299  03 D1				add	dx, cx
								; dx:ax / 8192
 029B  B9 000D				mov	cx, 13
 029E				@@:
 029E  D1 FA				sar	dx, 1
 02A0  D1 D8				rcr	ax, 1
 02A2  E2 FA				loop	@b

 02A4  8B 7E 04				mov	di, pc$
 02A7  89 05				mov	[di], ax
 02A9  89 55 02				mov	[di+2], dx

 02AC  5F				pop	di
 02AD  5E				pop	si
					ret
 02AE  5D		   *	    pop    bp
 02AF  C3		   *	    ret    00000h
 02B0				mul32 endp

 02B0				add32 proc c pc$:word, pa$:word, pb$:word
 02B0  55		   *	    push   bp
 02B1  8B EC		   *	    mov    bp, sp
 02B3  56				push	si

 02B4  8B 76 06				mov	si, pa$
 02B7  8B 04				mov	ax, [si]
 02B9  8B 54 02				mov	dx, [si+2]
 02BC  8B 76 08				mov	si, pb$
 02BF  03 04				add	ax, [si]
 02C1  13 54 02				adc	dx, [si+2]
 02C4  8B 76 04				mov	si, pc$
 02C7  89 04				mov	[si], ax
 02C9  89 54 02				mov	[si+2], dx

 02CC  5E				pop	si
					ret
 02CD  5D		   *	    pop    bp
 02CE  C3		   *	    ret    00000h
 02CF				add32 endp

 02CF				sub32 proc c pc$:word, pa$:word, pb$:word
 02CF  55		   *	    push   bp
 02D0  8B EC		   *	    mov    bp, sp
 02D2  56				push	si

 02D3  8B 76 06				mov	si, pa$
 02D6  8B 04				mov	ax, [si]
 02D8  8B 54 02				mov	dx, [si+2]
 02DB  8B 76 08				mov	si, pb$
 02DE  2B 04				sub	ax, [si]
 02E0  1B 54 02				sbb	dx, [si+2]
 02E3  8B 76 04				mov	si, pc$
 02E6  89 04				mov	[si], ax
 02E8  89 54 02				mov	[si+2], dx

 02EB  5E				pop	si
					ret
 02EC  5D		   *	    pop    bp
 02ED  C3		   *	    ret    00000h
 02EE				sub32 endp

				end start
Microsoft (R) Macro Assembler Version 6.14.8444		    10/29/22 09:31:31
asciiart.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_TEXT  . . . . . . . . . . . . .	16 Bit	 02EE	  Word	  Public  'CODE'	
_DATA  . . . . . . . . . . . . .	16 Bit	 002F	  Word	  Public  'DATA'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

add32  . . . . . . . . . . . . .	P Near	 02B0	  _TEXT	Length= 001F Public C
  pc$  . . . . . . . . . . . . .	Word	 bp + 0004
  pa$  . . . . . . . . . . . . .	Word	 bp + 0006
  pb$  . . . . . . . . . . . . .	Word	 bp + 0008
mul32  . . . . . . . . . . . . .	P Near	 0274	  _TEXT	Length= 003C Public C
  pc$  . . . . . . . . . . . . .	Word	 bp + 0004
  pa$  . . . . . . . . . . . . .	Word	 bp + 0006
  pb$  . . . . . . . . . . . . .	Word	 bp + 0008
sub32  . . . . . . . . . . . . .	P Near	 02CF	  _TEXT	Length= 001F Public C
  pc$  . . . . . . . . . . . . .	Word	 bp + 0004
  pa$  . . . . . . . . . . . . .	Word	 bp + 0006
  pb$  . . . . . . . . . . . . .	Word	 bp + 0008


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0001h	 
@code  . . . . . . . . . . . . .	Text   	 DGROUP
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
LiE  . . . . . . . . . . . . . .	L Near	 023D	  _TEXT	
Li . . . . . . . . . . . . . . .	L Near	 0140	  _TEXT	
Lx . . . . . . . . . . . . . . .	L Near	 010C	  _TEXT	
Ly . . . . . . . . . . . . . . .	L Near	 0106	  _TEXT	
a$ . . . . . . . . . . . . . . .	DWord	 0017	  _DATA	
b$ . . . . . . . . . . . . . . .	DWord	 001B	  _DATA	
ca$  . . . . . . . . . . . . . .	DWord	 001F	  _DATA	
cb$  . . . . . . . . . . . . . .	DWord	 0023	  _DATA	
hex  . . . . . . . . . . . . . .	Byte	 0000	  _DATA	
i$ . . . . . . . . . . . . . . .	Word	 0011	  _DATA	
start  . . . . . . . . . . . . .	L Near	 0100	  _TEXT	
t$ . . . . . . . . . . . . . . .	DWord	 0027	  _DATA	
w$ . . . . . . . . . . . . . . .	DWord	 002B	  _DATA	
x$ . . . . . . . . . . . . . . .	Word	 0013	  _DATA	
y$ . . . . . . . . . . . . . . .	Word	 0015	  _DATA	

	   0 Warnings
	   0 Errors
